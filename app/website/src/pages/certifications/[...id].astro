---
import Breadcrumbs from '@/components/Breadcrumbs.astro'
import { badgeVariants } from '@/components/ui/badge'
import Layout from '@/layouts/Layout.astro'
import { getAllCertifications, getCertificationWithSections } from '@/lib/data-utils'
import { Icon } from 'astro-icon/components'
import { Image } from 'astro:assets'
import PageHead from '@/components/PageHead.astro'

// Generate static paths for all certifications
export async function getStaticPaths() {
  const allCertifications = await getAllCertifications();

  return allCertifications.map(certification => {
    const cleanId = certification.id.replace(/\/index\.md$/, '');
    return {
      params: { id: cleanId },
      props: { cleanId }
    };
  });
}

const { cleanId } = Astro.props;
const result = await getCertificationWithSections(cleanId);

if (!result) {
  console.error(`Could not find certification: ${cleanId}`);
  return Astro.redirect('/certifications');
}

const { certification, sections } = result;
const { Content: CertificationContent, headings: certificationHeadings } = await certification.render();

// Render each section's content
const renderedSections = await Promise.all(
  sections.map(async (section) => {
    const { Content, headings } = await section.render();

    // Use the name from frontmatter instead of folder name
    // If it doesn't exist, try to get the first h1 heading
    let sectionTitle = section.data.name;

    if (!sectionTitle) {
      const h1Heading = headings.find(h => h.depth === 1);
      if (h1Heading) {
        sectionTitle = h1Heading.text;
      }
    }

    // If still no title, use a fallback (but avoid using folder name)
    if (!sectionTitle) {
      sectionTitle = "Section";
    }

    // Only keep h1 and h2 headings
    const filteredHeadings = headings.filter(h => h.depth <= 2);

    return {
      id: section.id.split('/').pop(), // Just use the last part, not whole folder name
      Content,
      headings: filteredHeadings,
      title: sectionTitle,
      data: section.data
    };
  })
);

// Filter certification headings to only include h1 and h2
const filteredCertHeadings = certificationHeadings.filter(h => h.depth <= 2);

// Schema for structured data
const structuredData = {
  '@context': 'https://schema.org',
  '@type': 'Certifications',
  headline: certification.data.name,
  datePublished: certification.data.startDate || '',
  dateModified: certification.data.endDate || certification.data.startDate || '',
  author: {
    '@type': 'Person',
    name: 'Author',
  },
  image: typeof certification.data.image === 'string'
  ? new URL(certification.data.image, Astro.site).toString()
  : null,
  keywords: certification.data.tags ? certification.data.tags.join(', ') : '',
  description: certification.data.description || '',
}
---

<Layout canonicalUrl={Astro.url} isWide={true}>
  <PageHead slot="head" title={certification.data.name} />
  <script
    type="application/ld+json"
    is:inline
    set:html={JSON.stringify(structuredData)}
  />

  <!-- Main layout with sidebar -->
  <div class="flex flex-col max-w-full relative">
    <!-- Breadcrumbs positioned at top -->
    <div class="w-full max-w-6xl mx-auto px-4 md:px-6 py-4">
      <Breadcrumbs
        items={[
          { href: '/certifications', label: 'Certifications', icon: 'lucide:folder' },
          { label: certification.data.name || 'Certification', icon: 'lucide:folder-open' },
        ]}
      />
    </div>
    
    <!-- Main content area - flexible width with centered content -->
    <main id="main-content" class="flex-1 transition-all duration-300 ease-in-out pb-12">
      <div class="mx-auto max-w-5xl px-4 md:px-6 lg:px-8">
        <section class="flex flex-col gap-y-4 sm:gap-y-6 text-start mb-8">
          <div class="flex flex-col">
            <h1 id="page-title" class="mb-2 text-2xl leading-tight font-medium text-pretty sm:text-3xl md:text-4xl lg:text-5xl">
              {certification.data.name}
            </h1>

            <div class="flex flex-wrap items-center gap-2">
              {certification.data.tags?.length > 0 && (
                <div class="flex flex-wrap gap-2 items-center">
                  {certification.data.tags.map((tag) => (
                    <a
                      href={`/tags/${tag}`}
                      class={badgeVariants({ variant: 'secondary' })}
                    >
                      <Icon name="lucide:hash" class="size-3" />
                      {tag}
                    </a>
                  ))}
                </div>
              )}
            </div>
          </div>
        </section>

        <!-- Certification metadata -->
        <div class="flex flex-wrap items-center gap-4 text-sm text-muted-foreground mb-6">
          {certification.data.startDate && (
            <div class="flex items-center gap-2">
              <Icon name="lucide:calendar" class="h-4 w-4" />
              <span>{new Date(certification.data.startDate).toLocaleDateString()}</span>
              {certification.data.endDate && (
                <span>- {new Date(certification.data.endDate).toLocaleDateString()}</span>
              )}
            </div>
          )}

          {certification.data.link && (
            <div class="flex items-center gap-2">
              <a
                href={certification.data.link}
                target="_blank"
                rel="noopener noreferrer"
                class="inline-flex items-center text-primary hover:underline"
              >
                <Icon name="lucide:external-link" class="h-4 w-4 mr-2" />
                <span>View Official Certification</span>
              </a>
            </div>
          )}
        </div>

        <!-- Description if available -->
        {certification.data.description && (
          <div class="mb-8">
            <div class="text-muted-foreground border-l-4 border-primary/50 pl-4 py-2 bg-muted/20 rounded-r-md">
              {certification.data.description}
            </div>
          </div>
        )}

        <!-- Certification image if available -->
        {certification.data.image && (
          <figure class="mb-8 sm:mb-10 rounded-lg overflow-hidden border shadow-sm">
              <Image 
                src={typeof certification.data.image === 'string' 
                  ? certification.data.image 
                  : certification.data.image?.src || ''}
                alt={certification.data.name || ''}
                class="w-full h-auto rounded-lg shadow-md"
                width={1200}
                height={800}
                loading="lazy"
              />
          </figure>
        )}

        <!-- Mobile TOC toggle button -->
        <button 
          id="mobile-toc-toggle" 
          class="fixed right-4 bottom-20 z-50 md:hidden bg-primary hover:bg-primary/90 text-primary-foreground shadow-lg rounded-full p-3 flex items-center justify-center"
          aria-label="Toggle table of contents"
        >
          <Icon name="lucide:list" class="h-5 w-5" />
        </button>

        <!-- Main content container with improved spacing -->
        <article class="prose prose-lg max-w-none certification-content mb-12">
          <div class="mb-8">
            <CertificationContent />
          </div>

          <!-- Section contents with improved spacing -->
          {renderedSections.map((section) => (
            <section id={`section-${section.id}`} class="mb-10 sm:mb-14 border-t border-muted/60 pt-8">
              <h2 class="text-2xl font-semibold mb-6">{section.title}</h2>
              <div class="section-content" data-section-id={section.id}>
                <section.Content />
              </div>
            </section>
          ))}

          <!-- Back to top button -->
          <button
            id="back-to-top"
            class="fixed bottom-4 right-4 sm:bottom-8 sm:right-8 p-3 bg-primary text-primary-foreground rounded-full shadow-lg opacity-0 invisible transition-all duration-300 z-10"
            aria-label="Back to top"
          >
            <Icon name="lucide:arrow-up" class="h-5 w-5" />
          </button>
        </article>
      </div>
    </main>

    <!-- Floating sidebar toggle button -->
    <button 
      id="sidebar-toggle" 
      class="fixed right-0 top-1/2 -translate-y-1/2 z-40 bg-primary hover:bg-primary/90 text-primary-foreground h-12 w-8 flex items-center justify-center rounded-l-md shadow-lg transition-all duration-300"
      aria-label="Toggle sidebar navigation"
    >
      <Icon name="lucide:chevron-left" id="sidebar-toggle-icon" class="h-5 w-5 transition-transform duration-300" />
    </button>

    <!-- Side navigation bar - floating overlay -->
    <aside 
      id="sidebar-nav" 
      class="fixed top-0 right-0 bottom-0 w-full sm:max-w-xs md:w-80 bg-background/95 backdrop-blur-sm border-l border-muted shadow-xl transform translate-x-full transition-transform duration-300 ease-in-out overflow-hidden z-30"
    >
      <div class="h-full flex flex-col">
        <!-- Header with close button -->
        <div class="flex items-center justify-between p-4 border-b border-muted">
          <h2 class="font-semibold text-lg">Contents</h2>
          <button id="mobile-close-toc" class="p-2 rounded-md hover:bg-muted" aria-label="Close table of contents">
            <Icon name="lucide:x" class="h-5 w-5" />
          </button>
        </div>

        <!-- Scrollable TOC content -->
        <div class="flex-1 overflow-y-auto p-4">
          <nav class="toc-nav">
            <!-- Content headings -->
            <div class="mb-6">
              {filteredCertHeadings.length > 0 && (
                <details class="toc-details" open>
                  <summary class="toc-summary cursor-pointer flex items-center justify-between font-semibold text-foreground py-2 px-2 rounded-md hover:bg-muted">
                    <span class="text-muted-foreground toc-toggle" aria-hidden="true">
                      <Icon name="lucide:chevron-down" class="toc-chevron h-4 w-4" />
                    </span>
                  </summary>
                  <ul class="space-y-1 border-l border-muted/60 pl-3 pt-2 ml-2">
                    {filteredCertHeadings.map((heading) => (
                      <li>
                        <a
                          href={`#${heading.slug}`}
                          class="block py-1.5 text-muted-foreground hover:text-foreground
                                transition-colors ${heading.depth === 1 ? 'font-medium' : 'text-[15px] pl-2'}
                                hover:bg-muted/50 rounded-md px-2 toc-item"
                          data-heading-id={heading.slug}
                        >
                          {heading.text}
                        </a>
                      </li>
                    ))}
                  </ul>
                </details>
              )}
            </div>

            <!-- Sections with their headings - without duplicate section titles -->
            {renderedSections.map((section) => (
              <div class="mb-6 toc-section-container">
                <details class="toc-details">
                  <summary class="toc-summary cursor-pointer flex items-center justify-between font-semibold text-foreground py-2 px-2 rounded-md hover:bg-muted">
                    <a
                      href={`#section-${section.id}`}
                      class="flex-1 hover:text-primary toc-section-link"
                      data-section-id={section.id}
                    >
                      {section.title}
                    </a>
                    <span class="text-muted-foreground toc-toggle ml-2" aria-hidden="true">
                      <Icon name="lucide:chevron-down" class="toc-chevron h-4 w-4" />
                    </span>
                  </summary>

                  {section.headings.length > 0 && (
                    <ul class="space-y-1 border-l border-muted/60 pl-3 pt-2 ml-2">
                      {section.headings
                        .filter(heading => heading.text !== section.title) // Filter out headings that match section title
                        .map((heading) => (
                          <li>
                            <a
                              href={`#section-${section.id}-${heading.slug}`}
                              class="block py-1.5 text-muted-foreground hover:text-foreground
                                    transition-colors ${heading.depth === 1 ? 'font-medium' : 'text-[15px] pl-2'}
                                    hover:bg-muted/50 rounded-md px-2 toc-item"
                              data-heading-id={`section-${section.id}-${heading.slug}`}
                            >
                              {heading.text}
                            </a>
                          </li>
                        ))
                      }
                    </ul>
                  )}
                </details>
              </div>
            ))}
          </nav>
        </div>
        
        <!-- Progress indicator with improved styling -->
        <div class="p-4 border-t border-muted bg-muted/10">
          <div class="relative pt-1">
            <div class="flex items-center justify-between mb-2">
              <div class="text-sm font-medium text-foreground/80">Reading Progress</div>
              <div class="text-sm font-medium text-foreground/80"><span id="progress-percentage">0</span>%</div>
            </div>
            <div class="overflow-hidden h-2 text-xs flex rounded-full bg-muted/50">
              <div id="reading-progress-bar" class="shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-primary rounded-full w-0 transition-all duration-300 ease-out"></div>
            </div>
          </div>
        </div>
      </div>
    </aside>
  </div>
</Layout>

<style>
  /* Improved spacing for headings */
  :global(.certification-content h1),
  :global(.certification-content h2),
  :global(.certification-content h3),
  :global(.certification-content h4) {
    scroll-margin-top: 2rem;
    margin-top: 2.5rem;
    margin-bottom: 1.5rem;
  }

  :global(#page-title) {
    scroll-margin-top: 2rem;
  }

  :global([id^="section-"]) {
    scroll-margin-top: 2rem;
  }

  /* Improve typography in the markdown content */
  :global(.certification-content) {
    font-size: 1.125rem;
    line-height: 1.75;
  }

  :global(.certification-content p) {
    margin-bottom: 1.5rem;
    max-width: 70ch;
  }

  :global(.certification-content ul),
  :global(.certification-content ol) {
    margin-bottom: 1.5rem;
    padding-left: 1.5rem;
  }

  :global(.certification-content li) {
    margin-bottom: 0.5rem;
  }

  :global(.certification-content pre) {
    padding: 1.25rem;
    margin: 1.5rem 0;
    border-radius: 0.5rem;
    background-color: hsl(var(--muted));
    overflow-x: auto;
  }

  :global(.certification-content img) {
    max-width: 100%;
    height: auto;
    border-radius: 0.5rem;
    margin: 1.5rem 0;
  }

  :global(.certification-content table) {
    width: 100%;
    border-collapse: collapse;
    margin: 1.5rem 0;
  }

  :global(.certification-content th),
  :global(.certification-content td) {
    padding: 0.75rem;
    border: 1px solid hsl(var(--border));
  }

  :global(.certification-content th) {
    background-color: hsl(var(--muted));
    text-align: left;
    font-weight: 600;
  }

  :global(.certification-content blockquote) {
    border-left: 4px solid hsl(var(--primary)/0.5);
    padding: 1rem 1.5rem;
    margin: 1.5rem 0;
    font-style: italic;
    color: hsl(var(--muted-foreground));
    background-color: hsl(var(--muted)/0.2);
    border-radius: 0 0.5rem 0.5rem 0;
  }

  /* Active TOC item styling */
  :global(.toc-item.active) {
    background-color: hsl(var(--muted));
    color: hsl(var(--foreground));
    font-weight: 500;
    border-left: 2px solid hsl(var(--primary));
  }

  /* Handle sidebar toggle state */
  body.sidebar-expanded #main-content {
    width: 100%;
  }

  body.sidebar-collapsed #main-content {
    width: 100%;
  }

  /* Responsive adjustments */
  @media (min-width: 1024px) {
    body.sidebar-expanded #sidebar-toggle-icon {
      transform: rotate(180deg);
    }
  }

  /* TOC container styling */
  .toc-nav {
    margin-right: 0.5rem;
  }

  /* Mobile optimizations */
  @media (max-width: 767px) {
    :global(.certification-content) {
      font-size: 1rem;
      line-height: 1.6;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Fix headings IDs to ensure all links work properly
    fixHeadingIds();

    // Setup intersection observer for TOC highlighting
    setupScrollObserver();

    // Setup back-to-top button
    setupBackToTopButton();

    // Setup smooth scrolling
    setupSmoothScrolling();

    // Setup sidebar toggle functionality
    setupSidebar();

    // Setup reading progress tracking
    setupReadingProgress();
    
    // Setup TOC section expansion when scrolled to section
    setupTocSectionExpansion();

    // Fix section link clicks
    fixSectionLinkBehavior();
  });

  function setupSidebar() {
    const body = document.body;
    const sidebarToggle = document.getElementById('sidebar-toggle');
    const sidebarNav = document.getElementById('sidebar-nav');
    const mobileTocToggle = document.getElementById('mobile-toc-toggle');
    const mobileCloseButton = document.getElementById('mobile-close-toc');
    
    // Set initial state
    body.classList.add('sidebar-collapsed');
    
    // Toggle sidebar
    sidebarToggle?.addEventListener('click', () => {
      if (body.classList.contains('sidebar-expanded')) {
        body.classList.remove('sidebar-expanded');
        body.classList.add('sidebar-collapsed');
        sidebarNav?.classList.add('translate-x-full');
        sidebarToggle.querySelector('#sidebar-toggle-icon')?.classList.remove('rotate-180');
      } else {
        body.classList.remove('sidebar-collapsed');
        body.classList.add('sidebar-expanded');
        sidebarNav?.classList.remove('translate-x-full');
        sidebarToggle.querySelector('#sidebar-toggle-icon')?.classList.add('rotate-180');
      }
    });

    // Show sidebar on mobile
    mobileTocToggle?.addEventListener('click', () => {
      sidebarNav?.classList.remove('translate-x-full');
      body.classList.add('sidebar-expanded');
      body.classList.remove('sidebar-collapsed');
    });

    // Hide sidebar on mobile
    mobileCloseButton?.addEventListener('click', () => {
      sidebarNav?.classList.add('translate-x-full');
      body.classList.remove('sidebar-expanded');
      body.classList.add('sidebar-collapsed');
    });

    // Close TOC when clicking a link
    document.querySelectorAll('.toc-item').forEach(link => {
      link.addEventListener('click', () => {
        if (window.innerWidth < 1024) {
          sidebarNav?.classList.add('translate-x-full');
          body.classList.remove('sidebar-expanded');
          body.classList.add('sidebar-collapsed');
        }
      });
    });

    // Close on backdrop click (for mobile)
    document.addEventListener('click', (e) => {
      if (!(e.target instanceof Node)) return;
      
      const clickedOutside = !sidebarNav?.contains(e.target as Node) && 
                            !sidebarToggle?.contains(e.target as Node) && 
                            !mobileTocToggle?.contains(e.target as Node);
      
      if (clickedOutside && window.innerWidth < 1024 && body.classList.contains('sidebar-expanded')) {
        sidebarNav?.classList.add('translate-x-full');
        body.classList.remove('sidebar-expanded');
        body.classList.add('sidebar-collapsed');
      }
    });

  function setupReadingProgress() {
    const progressBar = document.getElementById('reading-progress-bar');
    const progressPercentage = document.getElementById('progress-percentage');
    
    if (progressBar && progressPercentage) {
      window.addEventListener('scroll', () => {
        const scrollTop = window.scrollY;
        const docHeight = document.body.offsetHeight;
        const winHeight = window.innerHeight;
        const scrollPercent = scrollTop / (docHeight - winHeight);
        const scrollPercentRounded = Math.round(scrollPercent * 100);
        
        progressBar.style.width = `${scrollPercentRounded}%`;
        progressPercentage.textContent = String(scrollPercentRounded);
      });
    }
  }

  function fixHeadingIds() {
    // Process all headings in section contents
    document.querySelectorAll('.section-content').forEach(sectionContent => {
      const sectionId = sectionContent.getAttribute('data-section-id');
      if (!sectionId) return;

      // Find all h1, h2, h3 tags without IDs and add them
      const headings = sectionContent.querySelectorAll('h1, h2, h3');
      headings.forEach((heading) => {
        // Always assign ID even if it already has one, to ensure consistent format
        const headingText = heading.textContent?.trim() || '';
        const headingSlug = headingText
          .toLowerCase()
          .replace(/[^\w\s-]/g, '')
          .replace(/\s+/g, '-');

        if (headingSlug) {
          // Make sure we have consistent heading IDs format
          const headingId = `section-${sectionId}-${headingSlug}`;
          heading.id = headingId;
        }
      });
    });
  }

  function setupScrollObserver() {
    // Track active TOC item while scrolling
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            const id = entry.target.getAttribute('id');
            if (!id) return;

            // Handle both direct heading IDs and section IDs
            const isSectionHeader = id.startsWith('section-') && id.split('-').length === 2;
            const sectionId = isSectionHeader ? id : id.match(/section-([^-]+)/)?.[0];

            // Update all TOC items
            document.querySelectorAll('[data-heading-id]').forEach((item) => {
              const itemId = item.getAttribute('data-heading-id');
              item.classList.toggle('active', itemId === id);
            });

            // Handle section IDs separately
            document.querySelectorAll('[data-section-id]').forEach((item) => {
              const itemSectionId = item.getAttribute('data-section-id');
              if (itemSectionId && `section-${itemSectionId}` === id) {
                item.classList.add('active');
              } else if (itemSectionId && id.startsWith(`section-${itemSectionId}-`)) {
                // If it's a subheading in this section
                item.classList.remove('active');
              } else if (itemSectionId) {
                item.classList.remove('active');
              }
            });

            // Expand the corresponding details section
            if (sectionId) {
              const sectionDetails = document.querySelector(`.toc-section-container details summary a[href="#${sectionId}"]`)?.closest('details');
              if (sectionDetails && !sectionDetails.open) {
                sectionDetails.open = true;
              }
            }
          }
        });
      },
      { rootMargin: '-10% 0px -85% 0px', threshold: 0.1 }
    );

    // Observe all headings and section elements
    document.querySelectorAll('h1[id], h2[id], h3[id], section[id]').forEach((el) => {
      observer.observe(el);
    });
  }

  // Fix section link behavior to prevent default toggle
  function fixSectionLinkBehavior() {
    // Handle desktop section links
    document.querySelectorAll('.toc-section-link').forEach(link => {
      link.addEventListener('click', (e) => {
        // Allow the link to work without toggling the details element
        e.stopPropagation();

        // Get the section ID and scroll to it
        const sectionId = link.getAttribute('data-section-id');
        if (sectionId) {
          const targetEl = document.getElementById(`section-${sectionId}`);
          if (targetEl) {
            e.preventDefault();
            window.scrollTo({
              top: targetEl.getBoundingClientRect().top + window.pageYOffset - 80,
              behavior: 'smooth'
            });

            // Update URL hash
            history.pushState(null, '', `#section-${sectionId}`);

            // Expand the details element
            const detailsEl = link.closest('details');
            if (detailsEl && !detailsEl.open) {
              detailsEl.open = true;
            }
          }
        }
      });
    });
  }

  function setupBackToTopButton() {
    const backToTopButton = document.getElementById('back-to-top');
    if (backToTopButton) {
      window.addEventListener('scroll', () => {
        if (window.scrollY > 300) {
          backToTopButton.classList.remove('opacity-0', 'invisible');
          backToTopButton.classList.add('opacity-100', 'visible');
        } else {
          backToTopButton.classList.add('opacity-0', 'invisible');
          backToTopButton.classList.remove('opacity-100', 'visible');
        }
      });

      backToTopButton.addEventListener('click', () => {
        window.scrollTo({ top: 0, behavior: 'smooth' });
      });
    }
  }

  function setupSmoothScrolling() {
    // Add smooth scrolling to all hash links
    document.querySelectorAll('a[href^="#"]').forEach(link => {
      link.addEventListener('click', (e) => {
        const href = link.getAttribute('href');
        if (href) {
          const targetEl = document.querySelector(href);
          if (targetEl) {
            e.preventDefault();
            window.scrollTo({
              top: targetEl.getBoundingClientRect().top + window.pageYOffset - 80,
              behavior: 'smooth'
            });
            history.pushState(null, '', href);
          }
        }
      });
    });
  }
</script>
