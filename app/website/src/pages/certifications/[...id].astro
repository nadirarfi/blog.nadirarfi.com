---
import Breadcrumbs from '@/components/Breadcrumbs.astro'
import { badgeVariants } from '@/components/ui/badge'
import Layout from '@/layouts/Layout.astro'
import { getAllCertifications, getCertificationWithSections } from '@/lib/data-utils'
import { Icon } from 'astro-icon/components'
import { Image } from 'astro:assets'
import PageHead from '@/components/PageHead.astro'

// Generate static paths for all certifications
export async function getStaticPaths() {
  const allCertifications = await getAllCertifications();

  return allCertifications.map(certification => {
    const cleanId = certification.id.replace(/\/index\.md$/, '');
    return {
      params: { id: cleanId },
      props: { cleanId }
    };
  });
}

const { cleanId } = Astro.props;
const result = await getCertificationWithSections(cleanId);

if (!result) {
  console.error(`Could not find certification: ${cleanId}`);
  return Astro.redirect('/certifications');
}

const { certification, sections } = result;
const { Content: CertificationContent, headings: certificationHeadings } = await certification.render();

// Render each section's content
const renderedSections = await Promise.all(
  sections.map(async (section) => {
    const { Content, headings } = await section.render();

    // Use the name from frontmatter instead of folder name
    // If it doesn't exist, try to get the first h1 heading
    let sectionTitle = section.data.name;

    if (!sectionTitle) {
      const h1Heading = headings.find(h => h.depth === 1);
      if (h1Heading) {
        sectionTitle = h1Heading.text;
      }
    }

    // If still no title, use a fallback (but avoid using folder name)
    if (!sectionTitle) {
      sectionTitle = "Section";
    }

    // Only keep h1 and h2 headings
    const filteredHeadings = headings.filter(h => h.depth <= 2);

    return {
      id: section.id.split('/').pop(), // Just use the last part, not whole folder name
      Content,
      headings: filteredHeadings,
      title: sectionTitle,
      data: section.data
    };
  })
);

// Filter certification headings to only include h1 and h2
const filteredCertHeadings = certificationHeadings.filter(h => h.depth <= 2);

// Schema for structured data
const structuredData = {
  '@context': 'https://schema.org',
  '@type': 'Certifications',
  headline: certification.data.name,
  datePublished: certification.data.startDate || '',
  dateModified: certification.data.endDate || certification.data.startDate || '',
  author: {
    '@type': 'Person',
    name: 'Author',
  },
  image: typeof certification.data.image === 'string'
  ? new URL(certification.data.image, Astro.site).toString()
  : null,
  keywords: certification.data.tags ? certification.data.tags.join(', ') : '',
  description: certification.data.description || '',
}
---

<Layout canonicalUrl={Astro.url} isWide={true}>
  <PageHead slot="head" title={certification.data.name} />
  <script
    type="application/ld+json"
    is:inline
    set:html={JSON.stringify(structuredData)}
  />

  <!-- Using the grid-based layout similar to the example -->
  <section class="grid grid-cols-[minmax(0px,1fr)_min(calc(var(--breakpoint-lg)-2rem),100%)_minmax(0px,1fr)] gap-y-6">
    <!-- Breadcrumbs positioned in centered column -->
    <div class="col-start-2 mt-8">
      <Breadcrumbs
        items={[
          { href: '/certifications', label: 'Certifications', icon: 'lucide:folder' },
          { label: certification.data.name || 'Certification', icon: 'lucide:folder-open' },
        ]}
      />
    </div>

    <!-- Certification header in centered column -->
    <section class="col-start-2 flex flex-col gap-y-6 text-start">
      <div class="flex flex-col">
        <h1 id="page-title" class="mb-2 text-3xl leading-tight font-medium text-pretty sm:text-5xl">
          {certification.data.name}
        </h1>

        <div class="flex flex-wrap items-center gap-2">
          {certification.data.tags?.length > 0 && (
            <div class="flex flex-wrap gap-2 items-center">
              {certification.data.tags.map((tag) => (
                <a
                  href={`/tags/${tag}`}
                  class={badgeVariants({ variant: 'secondary' })}
                >
                  <Icon name="lucide:hash" class="size-3" />
                  {tag}
                </a>
              ))}
            </div>
          )}
        </div>
      </div>
    </section>

    <!-- Certification metadata in centered column -->
    <div class="col-start-2 flex flex-wrap items-center gap-2 text-sm text-muted-foreground">
      {certification.data.startDate && (
        <div class="flex items-center gap-2">
          <Icon name="lucide:calendar" class="h-4 w-4" />
          <span>{new Date(certification.data.startDate).toLocaleDateString()}</span>
          {certification.data.endDate && (
            <span>- {new Date(certification.data.endDate).toLocaleDateString()}</span>
          )}
        </div>
      )}

      {certification.data.link && (
        <div class="flex items-center gap-2">
          <a
            href={certification.data.link}
            target="_blank"
            rel="noopener noreferrer"
            class="inline-flex items-center text-primary hover:underline"
          >
            <Icon name="lucide:external-link" class="h-4 w-4 mr-2" />
            View Official Certification
          </a>
        </div>
      )}
    </div>

    <!-- Table of Contents -->
    {(filteredCertHeadings.length > 0 || renderedSections.length > 0) && (
      <div class="col-start-2">
        <div class="mt-6 mb-8 border rounded-lg shadow-sm overflow-hidden">
          <div class="bg-muted px-4 py-3 text-sm font-medium">
            Contents
          </div>
          <nav class="px-4 py-3">
            <!-- Main overview section -->
            <div class="mb-6">
              <details class="toc-details" open>
                <summary class="toc-summary cursor-pointer flex items-center justify-between font-semibold text-foreground mb-2">
                  <span>Overview</span>
                  <span class="text-muted-foreground toc-toggle" aria-hidden="true">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="toc-chevron"><path d="m6 9 6 6 6-6"/></svg>
                  </span>
                </summary>
                <ul class="space-y-1 border-l border-muted pl-3 pt-2">
                  {filteredCertHeadings.map((heading) => (
                    <li>
                      <a
                        href={`#${heading.slug}`}
                        class={`
                          block py-1.5 text-muted-foreground hover:text-foreground
                          transition-colors ${heading.depth === 1 ? 'font-medium' : 'text-[15px] pl-3'}
                          hover:bg-muted/40 rounded-md px-2 toc-item
                        `}
                        data-heading-id={heading.slug}
                      >
                        {heading.text}
                      </a>
                    </li>
                  ))}
                </ul>
              </details>
            </div>

            <!-- Sections with their headings -->
            {renderedSections.map((section) => (
              <div class="mb-6 toc-section-container">
                <details class="toc-details">
                  <summary class="toc-summary cursor-pointer flex items-center justify-between font-semibold text-foreground mb-2">
                    <a
                      href={`#section-${section.id}`}
                      class="hover:text-primary toc-section-link"
                      data-section-id={section.id}
                    >
                      {section.title}
                    </a>
                    <span class="text-muted-foreground toc-toggle" aria-hidden="true">
                      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="toc-chevron"><path d="m6 9 6 6 6-6"/></svg>
                    </span>
                  </summary>

                  {section.headings.length > 0 && (
                    <ul class="space-y-1 border-l border-muted pl-3 pt-2">
                      {section.headings.map((heading) => (
                        <li>
                          <a
                            href={`#section-${section.id}-${heading.slug}`}
                            class={`
                              block py-1.5 text-muted-foreground hover:text-foreground
                              transition-colors ${heading.depth === 1 ? 'font-medium' : 'text-[15px] pl-3'}
                              hover:bg-muted/40 rounded-md px-2 toc-item
                            `}
                            data-heading-id={`section-${section.id}-${heading.slug}`}
                          >
                            {heading.text}
                          </a>
                        </li>
                      ))}
                    </ul>
                  )}
                </details>
              </div>
            ))}
          </nav>
        </div>
      </div>
    )}

    <!-- Description if available -->
    {certification.data.description && (
      <div class="col-start-2">
        <div class="text-muted-foreground border-l-4 border-muted pl-4 py-2 mb-6 bg-muted/20 rounded-r-md">
          {certification.data.description}
        </div>
      </div>
    )}

    <!-- Certification image if available -->
    {certification.data.image && (
      <figure class="col-start-2 mb-10 rounded-lg overflow-hidden border shadow-sm">
        <Image
          src={certification.data.image}
          alt={certification.data.name || ''}
          class="h-auto w-full object-cover max-h-[300px]"
          width={1000}
          height={300}
          loading="lazy"
        />
      </figure>
    )}

    <!-- Main content container -->
    <article class="col-start-2 prose prose-lg max-w-none certification-content mb-8">
      <div class="mb-8">
        <CertificationContent />
      </div>

      <!-- Section contents with improved spacing -->
      {renderedSections.map((section) => (
        <section id={`section-${section.id}`} class="mb-12">
          <div class="flex items-center border-b border-muted pb-2 mb-6">
            <h2 class="text-2xl font-bold">
              {section.title}
            </h2>
          </div>

          <div class="section-content" data-section-id={section.id}>
            <section.Content />
          </div>
        </section>
      ))}

      <!-- Back to top button -->
      <button
        id="back-to-top"
        class="fixed bottom-8 right-8 p-3 bg-primary text-primary-foreground rounded-full shadow-lg opacity-0 invisible transition-all duration-300"
        aria-label="Back to top"
      >
        <Icon name="lucide:arrow-up" class="h-5 w-5" />
      </button>
    </article>
  </section>
</Layout>

<style>
  /* Improved spacing for headings */
  :global(.certification-content h1),
  :global(.certification-content h2),
  :global(.certification-content h3),
  :global(.certification-content h4) {
    scroll-margin-top: 5rem;
  }

  :global(#page-title) {
    scroll-margin-top: 5rem;
  }

  :global([id^="section-"]) {
    scroll-margin-top: 5rem;
  }

  /* TOC styling */
  .toc-summary {
    list-style: none;
  }

  .toc-summary::-webkit-details-marker {
    display: none;
  }

  /* Rotate chevron when details are open */
  .toc-details[open] .toc-chevron {
    transform: rotate(180deg);
  }

  .toc-chevron {
    transition: transform 0.2s ease;
  }

  /* Active TOC item styling */
  :global(.toc-item.active) {
    background-color: hsl(var(--muted)/0.7);
    color: hsl(var(--foreground));
    font-weight: 500;
    border-left: 2px solid hsl(var(--primary));
  }

  /* Active section styling */
  :global(.toc-section-container.active summary) {
    color: hsl(var(--primary));
    font-weight: 600;
  }

  /* Indented TOC links */
  .toc-nav ul.border-l {
    border-color: hsl(var(--muted)/0.8);
  }

  /* Section title links */
  .toc-section-link {
    flex: 1;
    padding: 0.25rem 0;
  }

  /* Make hovering over summary highlight the row */
  .toc-summary:hover {
    color: hsl(var(--primary));
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Fix headings IDs to ensure all links work properly
    fixHeadingIds();

    // Setup intersection observer for TOC highlighting
    setupScrollObserver();

    // Setup back-to-top button
    setupBackToTopButton();

    // Setup smooth scrolling
    setupSmoothScrolling();

    // Setup TOC section expansion when scrolled to section
    setupTocSectionExpansion();

    // Fix section link clicks
    fixSectionLinkBehavior();
  });

  // Fix section link behavior to prevent default toggle
  function fixSectionLinkBehavior() {
    // Handle desktop section links
    document.querySelectorAll('.toc-section-link').forEach(link => {
      link.addEventListener('click', (e) => {
        // Allow the link to work without toggling the details element
        e.stopPropagation();

        // Get the section ID and scroll to it
        const sectionId = link.getAttribute('data-section-id');
        if (sectionId) {
          const targetEl = document.getElementById(`section-${sectionId}`);
          if (targetEl) {
            e.preventDefault();
            window.scrollTo({
              top: targetEl.getBoundingClientRect().top + window.pageYOffset - 100,
              behavior: 'smooth'
            });

            // Update URL hash
            history.pushState(null, '', `#section-${sectionId}`);

            // Expand the details element
            const detailsEl = link.closest('details');
            if (detailsEl && !detailsEl.open) {
              detailsEl.open = true;
            }
          }
        }
      });
    });
  }

  function fixHeadingIds() {
    // Process all headings in section contents
    document.querySelectorAll('.section-content').forEach(sectionContent => {
      const sectionId = sectionContent.getAttribute('data-section-id');
      if (!sectionId) return;

      // Find all h1, h2 tags without IDs and add them
      const headings = sectionContent.querySelectorAll('h1, h2');
      headings.forEach((heading) => {
        // Always assign ID even if it already has one, to ensure consistent format
        const headingText = heading.textContent?.trim() || '';
        const headingSlug = headingText
          .toLowerCase()
          .replace(/[^\w\s-]/g, '')
          .replace(/\s+/g, '-');

        if (headingSlug) {
          // Make sure we have consistent heading IDs format
          const headingId = `section-${sectionId}-${headingSlug}`;
          heading.id = headingId;
        }
      });
    });
  }

  function setupScrollObserver() {
    // Track active TOC item while scrolling
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            const id = entry.target.getAttribute('id');
            if (!id) return;

            // Handle both direct heading IDs and section IDs
            const isSectionHeader = id.startsWith('section-') && id.split('-').length === 2;
            const sectionId = isSectionHeader ? id : id.match(/section-([^-]+)/)?.[0];

            // Update all TOC items
            document.querySelectorAll('[data-heading-id]').forEach((item) => {
              const itemId = item.getAttribute('data-heading-id');
              item.classList.toggle('active', itemId === id);
            });

            // Expand the corresponding details section
            if (sectionId) {
              const sectionDetails = document.querySelector(`.toc-section-container details summary a[href="#${sectionId}"]`)?.closest('details');
              if (sectionDetails && !sectionDetails.open) {
                sectionDetails.open = true;
              }
            }
          }
        });
      },
      { rootMargin: '-10% 0px -85% 0px', threshold: 0.1 }
    );

    // Observe all headings and section elements
    document.querySelectorAll('h1[id], h2[id], section[id]').forEach((el) => {
      observer.observe(el);
    });
  }

  function setupBackToTopButton() {
    const backToTopButton = document.getElementById('back-to-top');
    if (backToTopButton) {
      window.addEventListener('scroll', () => {
        if (window.scrollY > 400) {
          backToTopButton.classList.remove('opacity-0', 'invisible');
          backToTopButton.classList.add('opacity-100', 'visible');
        } else {
          backToTopButton.classList.add('opacity-0', 'invisible');
          backToTopButton.classList.remove('opacity-100', 'visible');
        }
      });

      backToTopButton.addEventListener('click', () => {
        window.scrollTo({ top: 0, behavior: 'smooth' });
      });
    }
  }

  function setupSmoothScrolling() {
    // Add smooth scrolling to TOC links (except section titles which are handled separately)
    document.querySelectorAll('a[href^="#"]:not(.toc-section-link)').forEach(link => {
      link.addEventListener('click', (e) => {
        const href = link.getAttribute('href');
        if (href) {
          const targetEl = document.querySelector(href);
          if (targetEl) {
            e.preventDefault();

            // Expand the corresponding section if it's in a collapsed details
            const sectionMatch = href.match(/section-([^-]+)/);
            if (sectionMatch) {
              const sectionId = sectionMatch[0];
              const detailsElement = document.querySelector(
                `.toc-section-container details summary a[href="#${sectionId}"]`
              )?.closest('details');

              if (detailsElement) {
                detailsElement.open = true;
              }
            }

            window.scrollTo({
              top: targetEl.getBoundingClientRect().top + window.pageYOffset - 100,
              behavior: 'smooth'
            });

            // Set URL hash without jumping
            history.pushState(null, '', href);
          }
        }
      });
    });
  }

  function setupTocSectionExpansion() {
    // When a section is in view, expand its section in the TOC
    const sectionObserver = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            const id = entry.target.getAttribute('id');
            if (!id || !id.startsWith('section-')) return;

            // Find and expand the corresponding details in TOC
            const sectionDetails = document.querySelector(
              `.toc-section-container details summary a[href="#${id}"]`
            )?.closest('details');

            if (sectionDetails) {
              // Close all other sections first
              document.querySelectorAll('.toc-section-container details').forEach(details => {
                if (details !== sectionDetails) {
                  if (details instanceof HTMLDetailsElement) {
                     details.open = false;
                  }
                }
              });

              // Open this section
              sectionDetails.open = true;

              // Add active class to the section container
              document.querySelectorAll('.toc-section-container').forEach(container => {
                container.classList.remove('active');
              });
              sectionDetails.closest('.toc-section-container')?.classList.add('active');
            }
          }
        });
      },
      { rootMargin: '-10% 0px -80% 0px', threshold: 0.1 }
    );

    // Observe all section elements
    document.querySelectorAll('section[id^="section-"]').forEach((el) => {
      sectionObserver.observe(el);
    });
  }
</script>
