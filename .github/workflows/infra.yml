name: Deploy AWS Infrastructure via CDK

on:
  push:
    branches: [main]
    paths: ["infrastructure/src/aws/cdk**", "infrastructure/src/aws/config**"]
  workflow_dispatch:
    inputs:
      environment:
        description: "Deployment Environment"
        required: true
        default: "prod"
        type: choice
        options: [prod]

env:
  AWS_REGION: eu-west-1
  NODE_VERSION: "18"
  GITHUB_ACTIONS_ROLE: GitHubActionsRole
  CDK_DIRECTORY: ./infrastructure/src/aws/cdk
  CDK_CONTEXT: "env=${{ github.event.inputs.environment || 'prod' }}"

jobs:
  deploy-infrastructure:
    name: Deploy AWS Infrastructure
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'prod' }}
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ env.GITHUB_ACTIONS_ROLE }}
          role-session-name: GitHubActionsCDKDeployment

      - name: Setup Node.js Environment
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: ${{ env.CDK_DIRECTORY }}/package-lock.json

      - name: Install CDK
        working-directory: ./infrastructure/src/aws/cdk
        run: npm install -g aws-cdk typescript        

      - name: Install Dependencies
        working-directory: ${{ env.CDK_DIRECTORY }}
        run: |
          echo "Installing project dependencies..."
          npm install
          echo "Using project's CDK version: $(npm aws-cdk --version)"

      - name: Synthesize CloudFormation Templates
        working-directory: ${{ env.CDK_DIRECTORY }}
        run: |
          echo "🔍 Synthesizing CloudFormation templates for environment: ${{ github.event.inputs.environment || 'prod' }}"
          cdk synth --all --context ${{ env.CDK_CONTEXT }} 
          cdk synth --all --context ${{ env.CDK_CONTEXT }} > synth-output.txt
          echo "✅ Synthesis completed successfully!"
          echo "📜 Generated the following stacks:"
          grep -A 1 "Stack:" synth-output.txt | grep -v "\-\-"

      - name: Show Infrastructure Changes
        id: cdk-diff
        working-directory: ${{ env.CDK_DIRECTORY }}
        continue-on-error: true # Diff might fail if resources don't exist yet
        run: |
          echo "🔄 Comparing infrastructure changes..."
          cdk diff --all --context ${{ env.CDK_CONTEXT }} | tee diff-output.txt

          # Extract key changes for a more concise summary
          echo "📊 Change Summary:"
          grep -E "^[±~]|will be" diff-output.txt | head -20

          if grep -q "will be" diff-output.txt; then
            echo "⚠️ Resources will be created/updated/deleted"
          else
            echo "✓ No significant changes detected"
          fi

      - name: Deploy Infrastructure Stacks
        working-directory: ${{ env.CDK_DIRECTORY }}
        run: |
          echo "🚀 Deploying infrastructure stacks to ${{ github.event.inputs.environment || 'prod' }}..."
          cdk deploy --all --context ${{ env.CDK_CONTEXT }} --require-approval never

          # Show stack status after deployment
          echo "✅ Deployment complete!"
          echo "📋 Stack Status:"
          aws cloudformation list-stacks --query "StackSummaries[?StackStatus!='DELETE_COMPLETE'].{Name:StackName,Status:StackStatus}" --output table
